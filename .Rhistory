summary(glm_test)
flt_test_03 %>%
select(diff_1935h, humid, pressure, visib, op_carr, op_ogn, op_mnf, op_mdl, op_eng) %>%
cor(use = 'pairwise.complete.obs') %>%
round(2) %>%
as_tibble() %>%
mutate(field = c('diff_1935h', 'humid', 'pressure', 'visib', 'op_carr', 'op_ogn', 'op_mnf', 'op_mdl', 'op_eng'))
flt_final <- flt_test_03 %>%
select(is_delay, diff_1935h, pressure, visib, op_carr, op_ogn)
glm_test <- glm(data = flt_final, is_delay ~ diff_1935h + pressure + visib + op_carr + op_ogn, family = binomial)
summary(glm_test)
coefficients(glm_test)
glm_test <- glm(data = flt_final, is_delay ~ diff_1935h, family = binomial)
summary(glm_test)
coefficients(glm_test)
### Finding observed probabilities by scheduled departure time
test_00 <- flights %>%
left_join(weather, by = c('time_hour', 'origin')) %>%
left_join(planes, by = 'tailnum') %>%
filter(!is.na(dep_delay) == T) %>% ## First, filter out flights with missing departure delay values
group_by(sched_dep_time) %>%
filter(n() >= 100) %>% ## Next, filter out schedule departure times with fewer than 100 flights
ungroup() %>%
mutate(dep_time_object = hm(paste ## Next, convert departure time to a time object
(trunc(sched_dep_time/100) ## This line provides the hour
,str_sub(sched_dep_time,-2,-1))) ## This line provides the minute
,sched_dep_time_metric = 100 * (trunc(sched_dep_time/100)) + 5/3 * as.numeric(str_sub(sched_dep_time, -2, -1)) ## Next, convert scheduled departure time to metric time, which is something I made up to make the graph look better
+ as.numeric(str_sub(as.character(sched_dep_time), -2, -1)) / 3 * 5
,is_delay = if_else(dep_delay > 0, 1, 0) ## Next, convert minutes delayed to a binary of is delayed
,diff_1935h = abs(as.numeric(dep_time_object - hm('19:35')) / 60)) %>% ## Convert scheduled departue time to a number of minutes to or from 7:35 p.m.
group_by(diff_1935h) %>%
mutate(op_diff1935 = mean(is_delay, na.rm = T)) %>% ## Find the observed probability grouped by the number of minutes from 7:35 p.m.
ungroup()
### Now plot
ggplot() +
geom_point(data = test_00, mapping = aes(x = sched_dep_time_metric, y = op_diff1935, color = 'Obs. prob. 2013'), size = 1) +
ggtitle('Delays became more likely until 7:35 then less likely') +
scale_color_fivethirtyeight(labels = ''
,name = 'Prob. of delay given sched. dep. time') +
theme_fivethirtyeight()
if('op_base' %in% colnames(test_00)) {print('already done')} else {
test_00 <- test_00 %>%
mutate(op_base = 0.39094)
}
if('pred_bivar' %in% colnames(test_00)) {print('already done')} else {
test_00 <- test_00 %>%
mutate(pred_bivar = 1/(1+exp(-(0.279603750 - 0.001999519 * diff_1935h))))
}
test_01 <- test_00 %>%
group_by(carrier) %>%
mutate(op_carr = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(origin) %>%
mutate(op_ogn = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
filter(!is.na(diff_1935h) & !is.na(pressure) & !is.na(visib) & !is.na(op_carr) & !is.na(op_ogn)) %>%
mutate(pred_multivar = 1/(1+exp(-(24.377394643
- 0.001998325 * diff_1935h
- 0.023033774 * pressure
- 0.077389351 * visib
+ 4.185103561 * op_carr
+ 4.185103561 * op_ogn))))
resi_err <- function(pred_col = 1) {
if(is.numeric(pred_col) == T) {
sse <- sum(na.rm = T, (test_01$op_diff1935 - test_01[pred_col])^2)
mse <- sse / (nrow(filter(test_01, !is.na(is_delay), !is.na(test_01[pred_col]))) - 2)
print(colnames(test_01[pred_col]))
print(paste('sse ', signif(sse, 4), ' mse ', signif(mse, 4)))
return(mse)
}
else {
print(paste('pred_col must be numeric'))
stop()
}
}
op_base_mse <- resi_err(46); pred_bivar_mse <- resi_err(47); pred_multivar_mse <- resi_err(50)
ggplot() +
geom_point(data = test_01, mapping = aes(x = sched_dep_time_metric, y = op_diff1935, color = 'observed probability'), size = 1) +
geom_line(test_01, mapping = aes(sched_dep_time_metric, pred_bivar, color = 'bivariate prediction'), size = 1.5) +
geom_line(data = test_01, mapping = aes(x = sched_dep_time_metric, y = op_base, color = 'base prediction'), size = 1.5) +
ggtitle('Fly in the morning to lower your chance for delay') +
scale_color_fivethirtyeight(labels = c('baseline p', 'pred p_bivar', 'observed p')
,name = 'Prob. of delay given sched. dep. time') +
theme_fivethirtyeight()
### You will need to download this file: http://mariobonifacio.github.io/flights_17.csv
flights_17 <- read_csv2(trim_ws = T, na = 'NULL', file = 'flights_17.csv', col_names = T)
test_17 <- flights_17 %>%
filter(!is.na(dep_delay) == T) %>%
mutate(diff_20h = if_else(sched_dep_time < 2000
,1960 - sched_dep_time
,sched_dep_time - 2000)
,sched_dep_time_metric = 100 * (trunc(sched_dep_time/100))
+ 5/3 * as.numeric(str_sub(sched_dep_time, -2, -1))
,pred_prob = 1/(1+exp(-(0.279603750 - 0.001999519 * diff_20h)))) %>%
group_by(diff_20h) %>%
filter(n() > 100) %>%
mutate(is_delay = if_else(dep_delay > 0, 1, 0)
,op_delay = mean(is_delay)) %>%
ungroup()
sse <- sum(na.rm = T, (test_17$op_delay - test_17$pred_prob)^2)
mse <- sse / (nrow(filter(test_17, !is.na(is_delay), !is.na(pred_prob))) - 2)
paste('sse ', sse, 'mse ', mse)
test_17 %>%
ggplot() +
geom_point(mapping = aes(x = sched_dep_time_metric, y = op_delay, color = 'Observed p'), size = 1) +
geom_line(mapping = aes(x = sched_dep_time_metric, y = pred_prob, color = 'Predicted p'), size = 1.5) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight(labels = c('baseline p', 'pred p_bivar')
,name = 'Prob. of delay given sched. dep. time in 2017') +
ggtitle('The bivariate model works well on 2017 data')
cat_facts %>% mutate(facts = round(facts,4))
flights %>%
ggplot(mapping = aes(dep_delay)) +
geom_histogram(na.rm = T) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight() +
labs(title = 'A large majority of flights clump around 0'
,subtitle = paste('But', sum(flights$dep_delay >= 600, na.rm = T), 'flights delayed more than 10 hours skew everything'))
tibble(dep_delay = c(rep(0.0,99), 15*60)) %>%
ggplot(mapping = aes(dep_delay)) +
geom_density(na.rm=T) +
geom_vline(xintercept = 9, color = 'darkred', size = 2) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight() +
xlim(-1, 30) +
labs(caption = 'I set x-axis max limit to 30 min., so the bar at 900 isnt visible'
,title = 'The mean delay in red tells us nothing very useful')
flights %>% filter(!is.na(dep_delay) == T, dep_delay > 15) %>% ggplot(mapping = aes(dep_delay)) + geom_histogram(binwidth = 10) + theme_fivethirtyeight() +
scale_color_fivethirtyeight() + ggtitle('A cutoff of 15 doesnt fix much')
flights %>% filter(!is.na(dep_delay) == T, dep_delay > 30) %>% ggplot(mapping = aes(dep_delay)) + geom_histogram(binwidth = 10) + theme_fivethirtyeight() +
scale_color_fivethirtyeight() + ggtitle('A cutoff of 30 doesnt fix much')
flights %>% filter(!is.na(dep_delay) == T, dep_delay > 60) %>% ggplot(mapping = aes(dep_delay)) + geom_histogram(binwidth = 10) + theme_fivethirtyeight() +
scale_color_fivethirtyeight() + ggtitle('A cutoff of 60 doesnt fix much')
flt_skew <- flights %>%
filter(!is.na(dep_delay)) %>%
mutate(dep_delay = (dep_delay + abs(dep_delay))/2)
dep_delay_skew <- tibble(i = 0L, skew_rightward = 0.01, i_ratio_of_rightward = 0.01, mdn_rightward = 0L, mean_rightward = 1.12)
for(i in 0:120){
dep_delay_skew[i+1,1] <- i
dep_delay_skew[i+1,2] <- round(skewness(flt_skew %>% filter(dep_delay >= i) %>% select(dep_delay) %>% as_vector()), 2)
dep_delay_skew[i+1,3] <- round(sum(flt_skew$dep_delay == i)/ sum(flt_skew$dep_delay >= i), 2)
dep_delay_skew[i+1,4] <- median(flt_skew %>% filter(dep_delay >= i) %>% select(dep_delay) %>% as_vector())
dep_delay_skew[i+1,5] <- round(mean(flt_skew %>% filter(dep_delay >= i) %>% select(dep_delay) %>% as_vector()))
}
dep_delay_skew
dep_delay_skew %>%
ggplot() +
geom_line(aes(i, skew_rightward, color = 'skew by cutoff'))
dep_delay_skew %>%
ggplot() +
geom_line(aes(i, skew_rightward, color = 'skew by cutoff')) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight(labels = 'skew by cutoff'
,name = '') +
ggtitle('Skew never comes close to a useful value')
## Load needed packages
library(tidyverse); library(nycflights13); library(stringr); library(lubridate); library(ggthemes); library(moments)
## Filter out entries where departure delay is NULL
## Because observed probability will be used as a benchmark to test the model, remove departure times with limited observations
test_a <- flights %>%
filter(!is.na(dep_delay) == T) %>%
group_by(sched_dep_time) %>%
filter(n() >= 100) %>%
ungroup()
# test_a
## Next, mutate scheduled departure time from integer to time object to do time operations on it
test_b <- test_a %>%
mutate(dep_time_object = hm(paste
(trunc(sched_dep_time/100) ## This line provides the hour
,str_sub(sched_dep_time,-2,-1))) ## This line provides the minute
,sched_dep_time_metric = 100 * (trunc(sched_dep_time/100)) + as.numeric(str_sub(as.character(sched_dep_time), -2, -1)) / 3 * 5)
# test_b
## Next, mutate delay time to a binary i.e. Is it delayed (YN)
## Find time difference between scheduled departure time and 8 pm
## Find the observed probability by time i.e. delayed flights / all flights
test_c <- test_b %>%
mutate(is_delay = if_else(dep_delay > 0, 1, 0)
,diff_1935h = abs(as.numeric(dep_time_object - hm('19:35')) / 60)) %>%
group_by(diff_1935h) %>%
mutate(op_diff1935 = mean(is_delay, na.rm = T)) %>%
ungroup()
# test_c
## Use the bivariate model created later to predict probability for each scheduled departure time
test_d <- test_c %>%
mutate(pred_bivar = 1/(1+exp(-(0.279603750 - 0.001999519 * diff_1935h))))
ggplot(data = test_d, mapping = aes(x = sched_dep_time_metric, y = op_diff1935, color = 'observed probability')) +
geom_point(size = 1) +
geom_line(data = test_d, mapping = aes(x = sched_dep_time_metric, y = pred_bivar, color = 'predicted probability'), size = 1.5) +
geom_line(size = 1, aes(x = sched_dep_time_metric, y = 0.39094, color = 'gray')) +
ggtitle('Fly in the morning to lower your chance for delay') +
scale_color_fivethirtyeight(labels = c('baseline p', 'observed p', 'pred. p')
,name = 'Prob. of delay given sched. dep. time') +
theme_fivethirtyeight()
### On the code side, I'll do the following:
# 1. Install and enable R packages to explore, manipulate, and analyze the data
# 2. Finding a baseline for departure delay by counting delayed and on-time flights
# 3. Use common fields to join flight table w/weather and plane tables
# 4. Select columns to be removed
# 5. Mutate some columns so they're more useful. Specifically, I group categorical variables and estimate a conditional probability using observed delay data
### 1. Install packages, as needed
# install.packages('tidyverse'); install.packages('skimr'); install.package('lubridate');
# install.packages('ggthemes'); install.packages('DiagrammeR')
# This line enable packages
library(tidyverse); library(nycflights13); library(lubridate); library(ggthemes); library(reshape2); library(DiagrammeR); library(skimr)
op_base <- sum(flights$dep_delay > 0, na.rm = T) / sum(!is.na(flights$dep_delay))
## op_base = 0.39094
### 3. Join flight, plane, and weather data into a single data frame of raw data to work with
flt_raw <- flights %>%
left_join(rename(planes,'manuf_year' = year), by = 'tailnum') %>% ## Rename plane manufacture year from 'year' to 'manuf_year' to not confuse it with flight year
left_join(weather, by = c('time_hour', 'origin'))
### Remove irrelevant columns
flt_test_00 <- flt_raw %>%
filter(!is.na(dep_delay) == T) %>%
select(-year.x, -month.x, -day.x, -hour.x ## Ex ante flight info 1
,-minute, -sched_arr_time, -flight ## Ex ante flight info 2
,-tailnum, -dest, -time_hour ## Ex ante flight info 3
,-dep_time, -arr_time ## Post hoc flight info 1
,-arr_delay ,-air_time ## Post hoc flight info 2
,-year.y, month.y, -day.y, -hour.y) ## Weather reading time
## Here's what's kept:
##(dep_delay, sched_dep_time, distance, manuf_year, engines ## 1-5
##         ,seats, temp, dewp, humid, wind_speed,wind_gust, precip ## 6-12
##       ,pressure, visib, distance ## 13-15
##     ,carrier, origin, type, manufacturer ## cat cols 16-19
##   ,model, speed ,engine) %>% ## cat cols 20-22
flt_test_01 <- flt_test_00 %>%
mutate(sched_dep_time_object = hm(paste
(trunc(sched_dep_time/100) ## This line provides the hour
,str_sub(sched_dep_time,-2,-1)))) ## This line provides the minute
flt_test_01 %>%
group_by(as.numeric(sched_dep_time_object)) %>%
filter(n() > 100) %>% ## Limit to sched dep times with over 100 instances
mutate(is_delay = if_else(dep_delay > 0, 1, 0) ## Turning delay from minutes delayed into a binary
,op_sched_dep = mean(is_delay, na.rm = T) ## I find an observed probability for delay by grouping all flights of a given sched_dep_time together and counting delay
,sched_dep_time_metric = round((sched_dep_time / 100 - trunc(sched_dep_time / 100)) * 500/3 + 100 * (trunc(sched_dep_time / 100)))) %>% ## I convert sched dep time to metric because it looks better graphed
ungroup() %>%
select(sched_dep_time_metric, op_sched_dep) %>%
unique() %>%
ggplot(mapping = aes(x = sched_dep_time_metric, y = op_sched_dep, color = 'delay | dep time')) +
geom_point() +
geom_smooth(method = 'loess', mapping = aes(color = 'smoothed delay | dep time')) +
ggtitle('Likelihood of departure delay peaks around 7:35 p.m.') +
scale_color_fivethirtyeight(labels = c('observed p', 'smoothed observed p')
,name = 'Prob. of delay given sched. dep. time') +
theme_fivethirtyeight()
temp_df <- flights %>%
filter(!is.na(dep_delay)) %>% ## Removing na values of departure delay
mutate(is_delay = if_else(dep_delay > 0, 1, 0)
,sched_dep_time_metric = round((sched_dep_time / 100 - trunc(sched_dep_time / 100)) * 500/3 +
100 * (trunc(sched_dep_time / 100))))
results_df <- tibble(i= 1L, cor_i = 0.1234)
for(i in 1:2399){ ## It's a for loop for every metric time to diff from
results_df[i, 1] <- paste(trunc(i / 100), trunc((i %% 100) * 3 / 5), sep = ':') ## This puts the clock time we're diffing from in each row
results_df[i, 2] <- cor(abs(i - temp_df$sched_dep_time_metric), temp_df$is_delay)} ## This puts the time-diff's correlation with is_delay
filter(results_df, abs(cor_i) == max(abs(cor_i))) ## This gives us the max value
flt_test_02 <- flt_test_01 %>%
mutate(is_delay = if_else(dep_delay > 0, 1, 0)
,diff_1935h = abs(as.numeric(sched_dep_time_object - hm('19:35')) / 60)) %>%
group_by(diff_1935h) %>%
mutate(op_diff1935 = mean(is_delay, na.rm = T)) %>%
ungroup()
flt_test_03 <- flt_test_02 %>%
group_by(carrier) %>%
mutate(op_carr = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(origin) %>%
mutate(op_ogn = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(type) %>%
mutate(op_type = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(manufacturer) %>%
mutate(op_mnf = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(model) %>%
mutate(op_mdl = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(speed) %>%
mutate(op_spd = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(engine) %>%
mutate(op_eng = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup()
### This code creates a separate data frame which links categorical variables to their relative probabilities
cat_facts <- flt_test_03 %>%
select(3:4, 7:9, 12:13, 28:34) %>% ## These are each category plus their associated factors
unique() %>%
gather(key = 'cat', value = 'obj', carrier, origin, type, manufacturer, model, speed, engine) %>% ## To make it more readable, this puts all facts into just two columns
rename(carrier = op_carr
,origin = op_ogn
,type = op_type
,manufacturer = op_mnf
,model = op_mdl
,speed = op_spd
,engine = op_eng) %>%
gather(key = 'trans', value = 'facts', 1:7) %>%
filter(cat == trans) %>%
select(-trans) %>%
unique() %>%
filter(!is.na(obj) == T) %>%
arrange(cat,desc(facts))
# cat_facts
flights %>% ##
select(dep_delay) %>%
filter(!is.na(dep_delay) == T
& dep_delay < as.numeric(quantile(flights %>% ## This filter finds the departure delay value associated with the 97.5th percentile
filter(!is.na(dep_delay) ==T) %>%
select(dep_delay) %>%
as_vector(), probs = .975))) %>%
mutate(dep_delay = (dep_delay + abs(dep_delay)) / 2  ## This line turns negative dep_delay into 0
,dep_delay_skew = skewness(flights$dep_delay, na.rm = T)) %>% ## Takes skew
as_tibble() %>%
ggplot(data = ., mapping = aes(x = dep_delay, fill = 'dep delay (min)')) +
geom_histogram(binwidth = 5, na.rm = T) +
theme_fivethirtyeight() +
ggtitle('Dep delay is concentrated near 0 and skewed right') +
scale_color_fivethirtyeight(name = 'Scheduled departure time and chance of delay') +
guides(fill = guide_legend(title = NULL)) +
theme_fivethirtyeight()
quantile(flights %>%
filter(!is.na(dep_delay) ==T) %>%
select(dep_delay) %>%
mutate(dep_delay = (dep_delay + abs(dep_delay))/2) %>%
as_vector(), probs = c(0.6915, 0.8413,0.9332 ## p(z < 0.5, 1.0, 1.5)
,0.9772, 0.9938, 0.9987)) ## p(z < 2.0, 2.5, 3.0)
op_base <- (flights %>% filter(dep_delay > 0) %>% nrow()) / (flights %>% filter(!is.na(dep_delay) == T) %>% nrow())
as_tibble(op_base) %>%
ggplot(mapping = aes(x=0, y=0.39094)) +
geom_point(size = 0) +
geom_abline(intercept = 0.39094, slope = 0, color = 'blue', size = 1) +
scale_color_fivethirtyeight() +
theme_fivethirtyeight() +
ggtitle('Assume a 39 percent chance of delay if no data') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
### Here, I split up all entries based on whether or not wind_gust is NULL
### Then, look at descriptive statistics of delay by those groups
flt_test_03 %>%
select(wind_gust, is_delay) %>%
filter(!is.na(is_delay)) %>%
mutate(na_gust = if_else(is.na(wind_gust), 0, 1)) %>%
group_by(na_gust) %>%
summarise(p_del = mean(is_delay)
,n_del     = length(is_delay)) %>%
round(2)
flt_test_03 %>%
select(wind_gust,is_delay) %>%
filter(is.na(is_delay) == F) %>%
mutate(na_gust = factor(if_else(is.na(wind_gust), 0, 1)
,levels = c(0,1)
,labels = c('null', 'not null') )) %>%
ggplot(aes(is_delay, fill = 'density whether wind gust is NA')) +
geom_density() +
ggtitle(label = 'Delay chance differs when wind gust is na but thats OK') +
theme_fivethirtyeight() +
facet_wrap(~na_gust, nrow = 2, ncol = 1)
glm_test <- glm(data = flt_test_03, is_delay ~ distance + manuf_year + engines + seats + speed + month.y + temp + dewp + humid + wind_dir + wind_speed + wind_gust + precip + pressure + visib + diff_1935h + op_carr + op_ogn + op_type + op_mnf + op_mdl + op_spd + op_eng, family = binomial)
summary(glm_test)
glm_test <- glm(data = flt_test_03, is_delay ~ diff_1935h + humid + pressure + visib + op_carr + op_ogn + op_mnf + op_mdl + op_eng, family = binomial)
summary(glm_test)
flt_test_03 %>%
select(diff_1935h, humid, pressure, visib, op_carr, op_ogn, op_mnf, op_mdl, op_eng) %>%
cor(use = 'pairwise.complete.obs') %>%
round(2) %>%
as_tibble() %>%
mutate(field = c('diff_1935h', 'humid', 'pressure', 'visib', 'op_carr', 'op_ogn', 'op_mnf', 'op_mdl', 'op_eng'))
flt_final <- flt_test_03 %>%
select(is_delay, diff_1935h, pressure, visib, op_carr, op_ogn)
glm_test <- glm(data = flt_final, is_delay ~ diff_1935h + pressure + visib + op_carr + op_ogn, family = binomial)
summary(glm_test)
coefficients(glm_test)
glm_test <- glm(data = flt_final, is_delay ~ diff_1935h, family = binomial)
summary(glm_test)
coefficients(glm_test)
### Finding observed probabilities by scheduled departure time
test_00 <- flights %>%
left_join(weather, by = c('time_hour', 'origin')) %>%
left_join(planes, by = 'tailnum') %>%
filter(!is.na(dep_delay) == T) %>% ## First, filter out flights with missing departure delay values
group_by(sched_dep_time) %>%
filter(n() >= 100) %>% ## Next, filter out schedule departure times with fewer than 100 flights
ungroup() %>%
mutate(dep_time_object = hm(paste ## Next, convert departure time to a time object
(trunc(sched_dep_time/100) ## This line provides the hour
,str_sub(sched_dep_time,-2,-1))) ## This line provides the minute
,sched_dep_time_metric = 100 * (trunc(sched_dep_time/100)) + 5/3 * as.numeric(str_sub(sched_dep_time, -2, -1)) ## Next, convert scheduled departure time to metric time, which is something I made up to make the graph look better
+ as.numeric(str_sub(as.character(sched_dep_time), -2, -1)) / 3 * 5
,is_delay = if_else(dep_delay > 0, 1, 0) ## Next, convert minutes delayed to a binary of is delayed
,diff_1935h = abs(as.numeric(dep_time_object - hm('19:35')) / 60)) %>% ## Convert scheduled departue time to a number of minutes to or from 7:35 p.m.
group_by(diff_1935h) %>%
mutate(op_diff1935 = mean(is_delay, na.rm = T)) %>% ## Find the observed probability grouped by the number of minutes from 7:35 p.m.
ungroup()
### Now plot
ggplot() +
geom_point(data = test_00, mapping = aes(x = sched_dep_time_metric, y = op_diff1935, color = 'Obs. prob. 2013'), size = 1) +
ggtitle('Delays became more likely until 7:35 then less likely') +
scale_color_fivethirtyeight(labels = ''
,name = 'Prob. of delay given sched. dep. time') +
theme_fivethirtyeight()
if('op_base' %in% colnames(test_00)) {print('already done')} else {
test_00 <- test_00 %>%
mutate(op_base = 0.39094)
}
if('pred_bivar' %in% colnames(test_00)) {print('already done')} else {
test_00 <- test_00 %>%
mutate(pred_bivar = 1/(1+exp(-(0.279603750 - 0.001999519 * diff_1935h))))
}
test_01 <- test_00 %>%
group_by(carrier) %>%
mutate(op_carr = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
group_by(origin) %>%
mutate(op_ogn = sum(is_delay>0) / length(is_delay) - op_base) %>%
ungroup() %>%
filter(!is.na(diff_1935h) & !is.na(pressure) & !is.na(visib) & !is.na(op_carr) & !is.na(op_ogn)) %>%
mutate(pred_multivar = 1/(1+exp(-(24.377394643
- 0.001998325 * diff_1935h
- 0.023033774 * pressure
- 0.077389351 * visib
+ 4.185103561 * op_carr
+ 4.185103561 * op_ogn))))
resi_err <- function(pred_col = 1) {
if(is.numeric(pred_col) == T) {
sse <- sum(na.rm = T, (test_01$op_diff1935 - test_01[pred_col])^2)
mse <- sse / (nrow(filter(test_01, !is.na(is_delay), !is.na(test_01[pred_col]))) - 2)
print(colnames(test_01[pred_col]))
print(paste('sse ', signif(sse, 4), ' mse ', signif(mse, 4)))
return(mse)
}
else {
print(paste('pred_col must be numeric'))
stop()
}
}
op_base_mse <- resi_err(46); pred_bivar_mse <- resi_err(47); pred_multivar_mse <- resi_err(50)
ggplot() +
geom_point(data = test_01, mapping = aes(x = sched_dep_time_metric, y = op_diff1935, color = 'observed probability'), size = 1) +
geom_line(test_01, mapping = aes(sched_dep_time_metric, pred_bivar, color = 'bivariate prediction'), size = 1.5) +
geom_line(data = test_01, mapping = aes(x = sched_dep_time_metric, y = op_base, color = 'base prediction'), size = 1.5) +
ggtitle('Fly in the morning to lower your chance for delay') +
scale_color_fivethirtyeight(labels = c('baseline p', 'pred p_bivar', 'observed p')
,name = 'Prob. of delay given sched. dep. time') +
theme_fivethirtyeight()
### You will need to download this file: http://mariobonifacio.github.io/flights_17.csv
flights_17 <- read_csv2(trim_ws = T, na = 'NULL', file = 'flights_17.csv', col_names = T)
test_17 <- flights_17 %>%
filter(!is.na(dep_delay) == T) %>%
mutate(diff_20h = if_else(sched_dep_time < 2000
,1960 - sched_dep_time
,sched_dep_time - 2000)
,sched_dep_time_metric = 100 * (trunc(sched_dep_time/100))
+ 5/3 * as.numeric(str_sub(sched_dep_time, -2, -1))
,pred_prob = 1/(1+exp(-(0.279603750 - 0.001999519 * diff_20h)))) %>%
group_by(diff_20h) %>%
filter(n() > 100) %>%
mutate(is_delay = if_else(dep_delay > 0, 1, 0)
,op_delay = mean(is_delay)) %>%
ungroup()
sse <- sum(na.rm = T, (test_17$op_delay - test_17$pred_prob)^2)
mse <- sse / (nrow(filter(test_17, !is.na(is_delay), !is.na(pred_prob))) - 2)
paste('sse ', sse, 'mse ', mse)
test_17 %>%
ggplot() +
geom_point(mapping = aes(x = sched_dep_time_metric, y = op_delay, color = 'Observed p'), size = 1) +
geom_line(mapping = aes(x = sched_dep_time_metric, y = pred_prob, color = 'Predicted p'), size = 1.5) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight(labels = c('baseline p', 'pred p_bivar')
,name = 'Prob. of delay given sched. dep. time in 2017') +
ggtitle('The bivariate model works well on 2017 data')
cat_facts %>% mutate(facts = round(facts,4))
flights %>%
ggplot(mapping = aes(dep_delay)) +
geom_histogram(na.rm = T) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight() +
labs(title = 'A large majority of flights clump around 0'
,subtitle = paste('But', sum(flights$dep_delay >= 600, na.rm = T), 'flights delayed more than 10 hours skew everything'))
tibble(dep_delay = c(rep(0.0,99), 15*60)) %>%
ggplot(mapping = aes(dep_delay)) +
geom_density(na.rm=T) +
geom_vline(xintercept = 9, color = 'darkred', size = 2) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight() +
xlim(-1, 30) +
labs(caption = 'I set x-axis max limit to 30 min., so the bar at 900 isnt visible'
,title = 'The mean delay in red tells us nothing very useful')
flights %>% filter(!is.na(dep_delay) == T, dep_delay > 15) %>% ggplot(mapping = aes(dep_delay)) + geom_histogram(binwidth = 10) + theme_fivethirtyeight() +
scale_color_fivethirtyeight() + ggtitle('A cutoff of 15 doesnt fix much')
flights %>% filter(!is.na(dep_delay) == T, dep_delay > 30) %>% ggplot(mapping = aes(dep_delay)) + geom_histogram(binwidth = 10) + theme_fivethirtyeight() +
scale_color_fivethirtyeight() + ggtitle('A cutoff of 30 doesnt fix much')
flights %>% filter(!is.na(dep_delay) == T, dep_delay > 60) %>% ggplot(mapping = aes(dep_delay)) + geom_histogram(binwidth = 10) + theme_fivethirtyeight() +
scale_color_fivethirtyeight() + ggtitle('A cutoff of 60 doesnt fix much')
flt_skew <- flights %>%
filter(!is.na(dep_delay)) %>%
mutate(dep_delay = (dep_delay + abs(dep_delay))/2)
dep_delay_skew <- tibble(i = 0L, skew_rightward = 0.01, i_ratio_of_rightward = 0.01, mdn_rightward = 0L, mean_rightward = 1.12)
for(i in 0:120){
dep_delay_skew[i+1,1] <- i
dep_delay_skew[i+1,2] <- round(skewness(flt_skew %>% filter(dep_delay >= i) %>% select(dep_delay) %>% as_vector()), 2)
dep_delay_skew[i+1,3] <- round(sum(flt_skew$dep_delay == i)/ sum(flt_skew$dep_delay >= i), 2)
dep_delay_skew[i+1,4] <- median(flt_skew %>% filter(dep_delay >= i) %>% select(dep_delay) %>% as_vector())
dep_delay_skew[i+1,5] <- round(mean(flt_skew %>% filter(dep_delay >= i) %>% select(dep_delay) %>% as_vector()))
}
dep_delay_skew
dep_delay_skew %>%
ggplot() +
geom_line(aes(i, skew_rightward, color = 'skew by cutoff')) +
theme_fivethirtyeight() +
scale_color_fivethirtyeight(labels = 'skew by dep_delay cutoff'
,name = '') +
ggtitle('Skew never comes close to a useful value')
