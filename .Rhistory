my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(day_of_week = weekdays(as_of)) %>%
group_by(code, day_of_week, t_mgn) %>%
mutate(max_case_ch = max(case_ch),
hi_date = if_else(case_ch == max_case_ch, as_of, NULL),
case_ch_pm = as.integer(case_ch / pop_2019 * 1000000),
pos_rate = case_ch / test_ch,
is_hrc = (t_mgn < 0)) %>%
filter(hi_date == max(as_of)) %>%
select(as_of, code, case_ch_pm, pos_rate, is_hrc) %>%
arrange(desc(case_ch_pm)) %>%
group_by(code, is_hrc) %>%
summarize(as_of = max(as_of), case_ch_pm = mean(case_ch_pm, na.rm = TRUE), pos_rate = max(pos_rate, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = reorder(code, desc(case_ch_pm)), y = case_ch_pm, fill = pos_rate)) +
labs(title = str_c("45 states had a record high number of new cases this week"),
subtitle = str_c("week ending ", max(my_data$as_of)),
y = "Daily new cases per million",
x = "State") +
geom_col() +
geom_label(mapping = aes(label = weekdays(as_of, abbreviate = TRUE)), color = "white") +
theme(axis.text.x = element_text(angle = 90, size = 8))
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(day_of_week = weekdays(as_of)) %>%
group_by(code, day_of_week) %>%
mutate(max_death_ch = max(death_ch),
hi_date = if_else(death_ch == max_death_ch, as_of, NULL),
death_ch_pm = as.integer(death_ch / pop_2019 * 1000000),
cfr = death_ch / case_ch,
is_hrc = (t_mgn < 0)) %>%
filter(hi_date == max(as_of)) %>%
select(as_of, code, death_ch_pm, cfr, is_hrc) %>%
arrange(desc(death_ch_pm)) %>%
group_by(code, is_hrc) %>%
summarize(as_of = max(as_of), death_ch_pm = mean(death_ch_pm, na.rm = TRUE), cfr = max(cfr, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = reorder(code, desc(death_ch_pm)), y = death_ch_pm, fill = is_hrc)) +
labs(title = str_c("States with a record number of deaths week ending ", max(my_data$as_of)),
y = "Daily deaths per million",
x = "State") +
geom_col() +
geom_label(mapping = aes(label = weekdays(as_of, abbreviate = TRUE)), color = "white")
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_mo = month(as_of)) %>%
group_by(year_mo, code) %>%
summarize(case_ch_pm = 30.5 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 30.5 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
mo_of = median(ymd(str_c("2020", year_mo, "15", sep = "-")))) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(year_mo) %>%
top_n(n = 10, case_ch_pm) %>%
ggplot(mapping = aes(x = mo_of, y = case_ch_pm, label = code, color = is_hrc, size = pos_rate)) +
geom_label(direction = "y", segment.color = NA, position = position_jitter(width = 10, height = 60)) +
theme(legend.position = "none") +
scale_size(range = c(3, 6)) +
labs(x = "month",
y = "monthly cases per million",
title = "Since June, red states have led in new cases per capita")
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_mo = month(as_of)) %>%
group_by(year_mo, code) %>%
summarize(case_ch_pm = 30.5 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 30.5 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
mo_of = median(ymd(str_c("2020", year_mo, "1", sep = "-")))) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(year_mo) %>%
top_n(n = 10, death_ch_pm) %>%
ggplot(mapping = aes(x = mo_of, y = death_ch_pm, label = code, color = is_hrc)) +
geom_label(position = position_jitter(width = 10, height = 60), segment.color = NA) +
theme(legend.position = "none") +
labs(title = "Ten states with most per capita COVID-19 deaths by month",
y = "Monthly COVID-19 deaths per million residents",
x = "Date")
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_wk = week(as_of)) %>%
group_by(year_wk, code) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(wk_date) %>%
top_n(n = 3, death_ch_pm) %>%
ggplot(mapping = aes(x = wk_date, y = death_ch_pm, label = code, fill = is_hrc)) +
geom_label(na.rm = TRUE, position = position_jitter(width = 3, height = 25)) +
theme(legend.position = "none") +
labs(subtitle = str_c("Five states with most per capita COVID-19 deaths by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 deaths per million residents",
x = "Date") +
xlim(ymd(20200301), today())
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_wk = week(as_of)) %>%
group_by(year_wk, code) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(wk_date) %>%
top_n(n = 3, case_ch_pm) %>%
ggplot(mapping = aes(x = wk_date, y = case_ch_pm, label = code, fill = is_hrc)) +
geom_label(na.rm = TRUE, position = position_jitter(width = 3, height = 25)) +
theme(legend.position = "none") +
labs(title = "Since June, states that voted for President Trump have led infection rates",
subtitle = str_c("Three states with most new per capita COVID-19 cases by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly new COVID-19 cases per million residents",
x = "Date") +
xlim(ymd(20200301), today())
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
inner_join(pop_dens) %>%
mutate(year_wk = week(as_of)) %>%
group_by(year_wk, reg_2, code, dens) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(wk_date) %>%
top_n(n = 3, case_ch_pm) %>%
mutate(wk_dens = mean(dens, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = wk_date, y = case_ch_pm)) +
geom_label(mapping = aes(label = code, fill = reg_2), na.rm = TRUE, position = position_jitter(width = 3, height = 25)) +
geom_col(mapping = aes(y = wk_dens), alpha = .4) +
labs(subtitle = str_c("Three states with most new per capita COVID-19 cases by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly new COVID-19 cases per million residents",
x = "Date",
legend = NULL,
caption = "Gray bars represent mean population density of top states") +
xlim(ymd(20200301), today()) +
theme(legend.title = element_blank())
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_wk = week(as_of)) %>%
group_by(year_wk, reg_2, code) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(wk_date) %>%
top_n(n = 5, case_ch_pm) %>%
ggplot(mapping = aes(x = wk_date, y = death_ch_pm, label = code, fill = reg_2)) +
geom_label(na.rm = TRUE, position = position_jitter(width = 3, height = 25)) +
theme(
# legend.position = "none"
legend.title = element_blank()) +
labs(subtitle = str_c("Five states with most per capita COVID-19 deaths by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 deaths per million residents",
x = "Date") +
xlim(ymd(20200301), today())
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_wk = week(as_of)) %>%
group_by(year_wk, reg_2, code) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(wk_date) %>%
top_n(n = 5, case_ch_pm) %>%
ggplot(mapping = aes(x = wk_date, y = death_ch_pm, label = code, fill = reg_2)) +
geom_label(na.rm = TRUE, position = position_jitter(width = 3, height = 25)) +
theme(
# legend.position = "none"
legend.title = element_blank()) +
labs(subtitle = str_c("Five states with most per capita COVID-19 deaths by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 deaths per million residents",
x = "Date") +
xlim(ymd(20200301), today())
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
inner_join(pop_dens) %>%
mutate(year_wk = week(as_of)) %>%
group_by(year_wk, reg_2, code, dens) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
group_by(wk_date) %>%
top_n(n = 3, case_ch_pm) %>%
ggplot(mapping = aes(x = wk_date, y = death_ch_pm, label = code, fill = dens)) +
geom_label(na.rm = TRUE, position = position_jitter(width = 3, height = 25), color = "white") +
# theme(legend.position = "none") +
labs(subtitle = str_c("Five states with most per capita COVID-19 deaths by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 deaths per million residents",
x = "Date") +
xlim(ymd(20200301), today()) +
theme_bw()
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(is_clinton = t_mgn < 0) %>%
group_by(is_clinton, as_of) %>%
summarize(case_ch_pm = sum(case_ch) / sum(pop_2019) * 1000000,
death_ch_pm = sum(death_ch) / sum(pop_2019) * 1000000,
cases_pm = sum(cases) / sum(pop_2019) * 1000000,
death_pm = sum(death) / sum(pop_2019) * 1000000) %>%
filter(cases_pm >= 10) %>%
ggplot() +
geom_smooth(mapping = aes(x = as_of, y = case_ch_pm, color = is_clinton, fill = is_clinton), alpha = 0.1, na.rm = TRUE, span = .1) +
labs(x = "Date", y = "New cases per day per million", title = "States Trump won have had more COVID-19 cases per capita since June", subtitle = "Daily COVID-19 cases per million residents by state's 2016 winner") +
theme(
# axis.text = element_blank(),
#     axis.ticks = element_blank(),
#     axis.title.x  = element_blank(),
# strip.background = element_rect(fill = "lightgray"),
legend.position = 0)
wday_fact <- my_data %>%
filter(as_of >= today() - months(1)) %>%
mutate(wk_num = week(as_of),
wkday = lubridate::wday(as_of),
case_ch = if_else(case_ch == 0, 1L, case_ch),
death_ch = if_else(death_ch == 0, 1L, death_ch)) %>%
group_by(code, wk_num) %>%
mutate(wday_case_local = case_ch / mean(case_ch, na.rm = TRUE),
wday_death_local = death_ch / mean(death_ch, na.rm = TRUE)) %>%
ungroup() %>%
group_by(code, wkday) %>%
summarize(wday_case_global = mean(wday_case_local, na.rm = TRUE),
wday_death_global = mean(wday_death_local, na.rm = TRUE))
my_data %>%
mutate(wkday = lubridate::wday(as_of)) %>%
inner_join(wday_fact) %>%
filter(code == "CA", as_of > today() - weeks(2)) %>%
mutate(case_ch_adj = case_ch / wday_case_global,
death_ch_adj = death_ch / wday_death_global,
t_day = wkday + 1) %>%
mutate(day_name = lubridate::wday(x = t_day, label = TRUE)) %>%
ggplot(mapping = aes(x = as_of)) +
geom_line(mapping = aes(y = case_ch), color = "gray", size = 3) +
geom_line(mapping = aes(y = case_ch_adj))
my_data %>%
inner_join(wday_fact) %>%
inner_join(results_2016) %>%
group_by(code) %>%
mutate(case_ch_adj = wday_case_global * case_ch,
death_ch_adj = wday_death_global * death_ch,
t_day = wkday + 1) %>%
filter(case_ch_adj == max(case_ch_adj, na.rm = TRUE) &
as_of == max(as_of)) %>%
mutate(day_name = lubridate::wday(x = t_day, label = TRUE)) %>%
ggplot(mapping = aes(x = code, y = case_ch_adj)) +
geom_col() +
geom_label(mapping = aes(label = day_name)) +
labs(subtitle = "States with record adjusted new cases reported today")
my_data %>%
inner_join(wday_fact) %>%
inner_join(results_2016) %>%
group_by(code) %>%
mutate(case_ch_adj = wday_case_global * case_ch,
death_ch_adj = wday_death_global * death_ch) %>%
filter(death_ch_adj == max(death_ch_adj, na.rm = TRUE) &
as_of == max(as_of)) %>%
mutate(day_name = lubridate::wday(wkday + 1, label = TRUE)) %>%
ggplot(mapping = aes(x = code, y = death_ch_adj)) +
geom_col() +
geom_label(mapping = aes(label = day_name)) +
labs(subtitle = "States with record adjusted deaths reported today")
my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_wk = week(as_of)) %>%
filter(code %in% c("CA", "CT", "MI", "NJ", "NY")) %>%
group_by(year_wk, code) %>%
summarize(case_ch_pm = 7 * mean(case_ch / pop_2019 * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(death_ch / pop_2019 * 1000000, na.rm = TRUE),
is_hrc = sum(t_mgn, na.rm = TRUE) < 0,
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0) %>%
ggplot(mapping = aes(x = wk_date, y = death_ch_pm, label = code, fill = code, color = code)) +
labs(subtitle = str_c("Compare some states through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 deaths per million residents",
x = "Date") +
xlim(ymd(20200301), today()) +
geom_smooth(alpha = 0.1, span = .2) +
theme_fivethirtyeight() +
theme(legend.title = element_blank())
nation_data <- my_data %>%
inner_join(code_names) %>%
inner_join(st_pop_2019) %>%
inner_join(results_2016) %>%
mutate(year_wk = week(as_of)) %>%
# filter(code %in% c("CA")) %>%
group_by(year_wk) %>%
summarize(case_ch_pm = 7 * mean(sum(case_ch) / sum(pop_2019) * 1000000, na.rm = TRUE),
death_ch_pm = 7 * mean(sum(death_ch) / sum(pop_2019) * 1000000, na.rm = TRUE),
test_ch_pm = 7 * mean(sum(test_ch) / sum(pop_2019) * 1000000, na.rm = TRUE),
pos_rate = sum(case_ch, na.rm = TRUE) / sum(test_ch, na.rm = TRUE),
wk_date = min(as_of, na.rm = TRUE)) %>%
filter(case_ch_pm > 0, death_ch_pm > 0)
nation_data %>%
ggplot(mapping = aes(x = wk_date, y = case_ch_pm)) +
labs(subtitle = str_c("Per capita COVID-19 cases by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 cases per million residents",
x = "Date") +
xlim(ymd(20200301), today()) +
geom_smooth(span = 0.2, na.rm = TRUE)
nation_data %>%
ggplot(mapping = aes(x = wk_date, y = death_ch_pm)) +
labs(subtitle = str_c("Per capita COVID-19 deaths by week through", max(my_data$as_of, na.rm = TRUE), sep = " "),
y = "Weekly COVID-19 deaths per million residents",
x = "Date") +
xlim(ymd(20200301), today()) +
geom_line(na.rm = TRUE)
cor_data <- my_data %>%
select(as_of, code, cases, death) %>%
filter(as_of > as_of - months(6))
j <- data.table(code_offset = character(), d_offset = integer(), cor_offset = double())
st_vector <- code_names %>% select(code) %>% arrange(code) %>% pull(code)
for (k in st_vector) {
for (i in 5:28) {
j <- rbind(j,
data.table(code_offset = k,
d_offset = i,
cor_offset = cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1) %>%
cor(x = ., y = cor_data[code == k]$cases, use = "complete.obs")))
}
}
j %>%
group_by(code_offset) %>%
arrange(desc(cor_offset)) %>%
top_n(1) %>%
ungroup() %>%
arrange(desc(d_offset))
cor_data <- my_data %>%
select(as_of, code, cases, death) %>%
filter(as_of > as_of - months(6))
j <- data.table(code_offset = character(), d_offset = integer(), cor_offset = double())
st_vector <- code_names %>% select(code) %>% arrange(code) %>% pull(code)
for (k in st_vector) {
for (i in 5:31) {
j <- rbind(j,
data.table(code_offset = k,
d_offset = i,
cor_offset = cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1) %>%
cor(x = ., y = cor_data[code == k]$cases, use = "complete.obs")))
}
}
j %>%
group_by(code_offset) %>%
arrange(desc(cor_offset)) %>%
top_n(1) %>%
ungroup() %>%
arrange(desc(d_offset))
cor_data[code == k]
cor_data <- my_data %>%
select(as_of, code, cases, death) %>%
filter(as_of > as_of - months(6))
j <- data.table(code_offset = character(), d_offset = integer(), cor_offset = double())
st_vector <- code_names %>% select(code) %>% arrange(code) %>% pull(code)
for (k in st_vector) {
for (i in 5:61) {
j <- rbind(j,
data.table(code_offset = k,
d_offset = i,
cor_offset = cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1) %>%
cor(x = ., y = cor_data[code == k]$cases, use = "complete.obs")))
}
}
j %>%
group_by(code_offset) %>%
arrange(desc(cor_offset)) %>%
top_n(1) %>%
ungroup() %>%
arrange(desc(d_offset))
cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1)
cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of"))
cor_data <- my_data %>%
select(as_of, code, cases, death) %>%
filter(as_of > as_of - months(6))
j <- data.table(code_offset = character(), d_offset = integer(), cor_offset = double())
st_vector <- code_names %>% select(code) %>% arrange(code) %>% pull(code)
for (k in st_vector) {
for (i in 10:40) {
j <- rbind(j,
data.table(code_offset = k,
d_offset = i,
cor_offset = cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1) %>%
cor(x = ., y = cor_data[code == k]$cases, use = "complete.obs")))
}
}
j %>%
group_by(code_offset) %>%
arrange(desc(cor_offset)) %>%
top_n(1) %>%
ungroup() %>%
arrange(desc(d_offset))
j[order(-cor_offset)]
my_kor <- my_oecd %>%
filter(co_code == "KOR") %>%
select(as_of, cases, deaths)
j <- data.table(d_offset = integer(), cor_offset = double())
for (i in 5:62) {
j <- rbind(j, data.table(d_offset = i, cor_offset = my_kor %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(my_kor, by = c("d_lag" = "as_of")) %>%
pull(6) %>%
cor(x = ., y = my_kor$cases, use = "complete.obs")))
}
my_kor
j
cor_data <- my_data %>%
select(as_of, code, cases, death) %>%
filter(as_of > ymd("20200601"))
j <- data.table(code_offset = character(), d_offset = integer(), cor_offset = double())
st_vector <- code_names %>% select(code) %>% arrange(code) %>% pull(code)
for (k in st_vector) {
for (i in 10:40) {
j <- rbind(j,
data.table(code_offset = k,
d_offset = i,
cor_offset = cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1) %>%
cor(x = ., y = cor_data[code == k]$cases, use = "complete.obs")))
}
}
j %>%
group_by(code_offset) %>%
arrange(desc(cor_offset)) %>%
top_n(1) %>%
ungroup() %>%
arrange(desc(d_offset))
cor_data <- my_data %>%
select(as_of, code, cases, death) %>%
filter(as_of > ymd("20200601"))
j <- data.table(code_offset = character(), d_offset = integer(), cor_offset = double())
st_vector <- code_names %>% select(code) %>% arrange(code) %>% pull(code)
for (k in st_vector) {
for (i in 10:40) {
j <- rbind(j,
data.table(code_offset = k,
d_offset = i,
cor_offset = cor_data %>%
filter(code == k) %>%
mutate(d_lag = as_of + days(i)) %>%
left_join(cor_data[code == k], by = c("d_lag" = "as_of")) %>%
pull(-1) %>%
cor(x = ., y = cor_data[code == k]$cases, use = "complete.obs")))
}
}
j %>%
group_by(code_offset) %>%
arrange(desc(cor_offset)) %>%
top_n(1) %>%
ungroup() %>%
arrange(desc(d_offset))
